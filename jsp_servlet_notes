[Seoul wiz]

General
	WAS : Web application server, apache tomcat
	MVC
		Model(DB?)
		View : JSP
			.jsp 파일, Tomcat에서 자동으로 .java .class로 변환
			위치 : tomcat폴더\work\Catalina\localhost\jsp\org\apache\jsp
		Controller : servlet, .java 파일
	java servlet의 장점
		Thread : 타 CGI 언어에 비해 서버 부하 낮음.
		재활용 : 동작 속도 빠름, 최초 요청때 객체 생성 메모리 로딩, 이후 요청은 기존 객체 재활용.
	Container
		Web/JSP : apache tomcat

04 Servlet
	General
		생성 : Project -> servlet, superclass : HttpServlet, mapping
		superclass 문제가 있으면 project buildpath lib에 apache tomcat 확인	
		.java 파일, 수정되면 server restart
	Mapping
		Annotation
			@WebServlet("/매핑명"), .java 소스파일에 직접 입력.
		web.xml
			<web-app>에 <servlet> <servlet-mapping> 추가
	
05 Servlet
	doGet() : servlet의 일반적 호출시 사용
	doPost() : form 요청이 post 방식일 경우 사용
	Context path : server.xml, 웹어플 구분 정보

06 Servlet
	작동 순서
		client(web browser) -> web server -> WAS -> servlet container(create thread & object)
	생명주기
		최초 한번 : Servlet 객체 생성 -> Init() 호출
		요청시 매번 : service(), doGet(), doPost()
		마지막 한번 : destroy() 호출, servlet 수정 서버 restart 같은 자원 해제
	선처리 후처리
		@PostConstruct @PreDestroy annotation을 통해 선처리 후처리 메소드 지정.
	
07 Servlet
	Form -> HttpServletRequest -> parameters
	Form tag
		<form action="요청 컴포넌트명" method="전송방식">
		요청 컴포넌트 : .jsp, .html, HWorld
		전송 방식 : get(url에 정보 같이 보내짐), post()
	Servlet parameter
		getParameter(name) : 1개
		getParameterValues(name) : 복수, checkbox
		getParameterNames() : form component names 
	Character encoding (KR) 
		get : server.xml -> <connector>, URIEncoding="EUC-KR" 추가, publish 실행?
		post : servlet -> doPost, request.setCharacterEncoding("EUC-KR") 추가
	동작
		Client->server
			HttpServletRequest 데이터형 request 객체를 통해 정보를 가져옴
			HttpServletRequest 메소드를 사용하여 데이터 추출
			eg)
				String id = request.getParameter("id");
		Server->client
			HttpServletRequest 데이터형 reponse 객체에 정보를 넣어서 보냄
			eg)
				response.setContentType("text/html; charset = EUC-KR");
				PrintWriter writer = response.getWriter();
				writer.println("<html><head></head><body>");
				writer.close();

08 Servlet
	Servlet initialization : 특정 servlet 초기화
		web.xml : web.xml에 기술하고 servlet에서 ServletConfig 클래스를 통해 사용
			web.xml : <servlet>에 <init-param> 추가
			servlet : ServletConfig 메소드 getInitParameter() 사용
		annotation : servlet의 @WebServlet에 @WebInitParam 추가
			@WebServlet(urlPatterns={"매핑명"}, initParams={@WebInitParam(초기화1), @WebInitParam()...})
	ServletContext : 데이터 공유, 복수 servlet 초기화
		web.xml에 기술하고 여러 servlet에서 공유
		web.xml : <servlet> 상단에 <context-param> 추가
		servlet : ServletContext 메소드 getServletContext().getInitParameter() 사용
	ServletContextListener : 웹어플리케이션 생명주기 감시
		web application = many servlets
		감시 클래스 생성 : ServletContextListener 인터페이스 구현
		web.xml : <web-app>에 <listener> 추가
		annotation : listener class에 @WebListener 추가
		
09 JSP
	General
		Java Server Pages : HTML 코드안에 Java 코드를 삽입, servlet은 java에 HTML 삽입
		Fast : servlet으로 동작, 최초 JSP->class 변환 추가
	JSP Tags
		<%@ ... %> : Directive, page 속성
		<%-- ... --%> : Comment, 서버이기 때문에 clients에서 보이지 않음
		<%! ... %> : Declaration, 변수 & 메소드 선언
		<%= ... %> : Expression, 결과값 출력, 끝에 ";" 없음
		<% ... %> : Scriptlet, java code, muti-line
		<jsp:action> </jsp:action> : Action-tag, Java bean
	Architecture
		1. Client(web browser) 요청 : Client(JSP, helloWorld.jsp) -> Server(JSP container, tomcat)
		2. Server 처리 : JSP(helloWorld.jsp) -> Servlet(helloWorld_jsp.java) -> Class(helloWorld_jsp.class), 자동
		3. Client 응답 : Server -> Client(HTML, web browser)
	Built-in objects
		내부 객체, JSP->Servlet 변환시 자동으로 생성되어 바로 사용 가능한 객체.
		IO(request, response, out), servlet(page, config), session, exception
				
10 JSP
	Script
		scriplet, declaration, expression : used for inserting java codes into JSP documents\
		Scriplet : <% java 코드 %>
		Declaration : <%! variable method 선언 %>, 메소드는 필수, 변수는 왜?
	Directive
		<%@ 속성 %> : JSP page의 속성 지정
		page : 현재 page의 속성 지정
		include : 현재 page에 다른 page 삽입
		taglib : tag library, 사용자 정의 tag?
	Comment
	
11 JSP
	request object : web browser를 통해 서버에 요청한 정보를 관리하는 객체
		getParameter(), getParameterValues(), getParameterNames()
	response object : web browser 요청에 서버가 응답할 정보를 관리하는 객체
		getCharacterEncoding(), addCookie(), sendRedirect()
		
12 JSP
	Action-tag : <jsp:action>, action = forward include param  
	forward : 페이지 넘기기, URL은 유지됨.
		<jsp:forward page="파일" />
	include : 페이지 삽입
		<jsp:include page="파일" />
	param : 페이지를 넘기거나 삽입할때 parameter 전달
		<jsp:action>
			<jsp:param name="id" value="blitz" />
			<jsp:param name="pwd" value="1234" />
		</jsp:action>

13 Cookie
	General
		http 통신 종료 : 클라이언트 요청을 서버가 응답하여 처리하면 통신이 종료됨.
		통신 종료 상태에서 cookie를 통해 관계를 유지.
		서버에서 생성되고 클라이언트에 저장되며 용량 제한 존재.
	동작
		1. 서버 : 쿠키 생성 및 속성 설정
			Cookie 쿠키 = new Cookie(속성)
		2. 서버 : response 객체에 탑재 -> 클라이언트로 전송
			response.addCookie(쿠키)
		3. 클리이언트 : 쿠키 저장
		4. 클라이언트 요청을 서버가 처리할때 쿠키 참조.
	Method
		설정 : setMaxAge() setPath() setValue() setVersion()
		조회 : getMaxAge() getName() getPath getValue() getVersion()
		
14 Session
	General
		cookie와 동일한 역할, 클라이언트-서버 관계 유지
		서버에 객체로 존재하여 보안이 좋음
		web browser 마다 jsp container가 세션을 자동 생성
		데이터 한계 없음.
		유효시간 30분, web.xml
	Method
		설정 : setAttribute()
		조회 : getAttribute() getAttributeNames() getId() isNew() getMaxInactiveInterval() 
		삭제 : removeAttribute() invalidate()
		request.isRequestedSessionIdValid()
		
15 Exception
	General
		오류 발생시 web 사용자에게 error를 친근하게 전달
		response.setStatus(200) : 페이지 넘길때 에러 세팅 문제가 있을 경우 사용
		URL 변화 참고, 보통 변하지 않음
		각 페이지별 세팅 : page directive 사용
		일괄 처리 : web.xml 사용
	Page directive
		예외 발생 페이지
			<%@ page errorPage = "예외 페이지" %>
			<% 에러 가능성 있는 코드 %>
		예외 페이지
			<%@ page isErrorPage = "true" %> : true 일경우만 exception 객체 사용 가능
			<% response.setStatus(200); %> : 정상(200) 페이지로 세팅
			<%= exception.getMessage(); %>
	web.xml
		<error-page>
			<error-code>404</error-code> : 에러 404의 경우 
			<location>/error404.jsp</location> : error404.jsp로 넘김
		</error-page>

16 Java bean
	General
		반복적 작업을 효율적으로 하기 위해 사용
		데이터(속성)와 기능(메소드)로 이루어진 클래스
		jsp에서 action-tag를 통해 javabean 사용
		빈의 메소드명 주의
	Action-tag
		useBean : 빈 사용
			<jsp:useBean 빈이름 클래스이름 스코프 />,
			<jsp:useBean id="student" class="kr.co.iamtek.Student" scope="page" />
			scope : page < request < session < application
		setProperty : 빈 데이터 업데이트
			<jsp:setProperty 빈이름 속성이름 속성값 />,
			<jsp:setProperty name="student" property="name" value="홍길동" />
		getProperty : 빈 데이터 값 가져오기
			<jsp:getPropery 빈이름 속성이름 />,
			<jsp:getPropery name="student" property="name" />

17, 18, 19 JDBC
	General
		JDBC : Java Database Connectivity
		Exception : JDBC 코드는 항상 error 처리 필수, try-catch
		connector 설치 다른 방법 확인
	절차
		JDBC 드라이버 로드
			Class.forName(driver)
			MySQL : driver = "com.mysql.jdbc.Driver"
			Oracle : driver = "oracle.jdbc.driver.OracleDriver"
		DB 연결
			Connection myConn = DriverManager.getConnection(url, user, password);
			MySQL : url = "jdbc:mysql://localhost:3306/db이름"
			MySQL : url = "jdbc:oraclel:thin@localhost:1521/db이름"
		SQL문 실행
			Statement myStmt = connection.createStatement();
			ResultSet myRs =myStmt.executeQuery(SQL 문장);
			executeQuery() : select, SQL문 실행후 복수의 결과값이 있을 경우 사용
				이동 메소드 : next() previous() first() last()
				get 메소드 : getString() getInt()
			executeUpdate() : insert, delete, update, 테이블의 내용만 변경될 경우 사용
		DB 연결 해제
			myRs.close(); myStmt.close(); myConn.close();
	Eg
		Class.forName("com.mysql.jdbc.Driver");
		Connection myConn myConn = DriverManager.getConnection("jdbc:mysql://localhost:3306/test", "blitz", "mysql");
		Statement myStmt = myConn.createStatement();
		ResultSet myRs = myStmt.executeQuery("SELECT * FROM `table`");
		while(myRs.next()) {String id = myRs.getString("id");String pw = myRs.getString("pw");}
		myRs.close(); myStmt.close(); myConn.close();
		
20 DBCP (hard)
	General
		DBCP : Database Connection Pooling
		JSP/Servlet 코드 관리를 위해 DB관련 코드를 따른 클래스로 분리
		Architecture : Client <-> Server (JSP/Servlet <-> DTO <-> DAO) <-> DB
	DAO : Data Access Object
		DB에 접속해서 DB 작업(추가, 삭제, 수정)을 하는 클래스
	DTO : Data Transfer Object
		DAO를 통해 DB 작업에 관련된 데이터를 관리하는 클래스
	PreparedStatement
		Statement 객체의 발전된 버전, query문(먼저 설정) 설정이 쉬움
		Eg
			SQL = "INSERT INTO `members` (id, pw, name, phone, gender) VALUES (?, ?, ?, ?, ?)";
			myPsmt = myConn.prepareStatement(SQL);
			myPsmt.setString(1, 아이디);
			myPsmt.executeUpdate();
	DBCP
		Database Connection Pooling
		DB optimization 기법
			보통 DB 요청 때마다 connection 객체를 생성.
			톰켓 컨테이너에서 connection 객체들을 미리 생성후 DB 요청시 이를 할당하고 DB작업이 끝나면 반환
			tomcat의 context.xml 수정하고 republish하여 tomcat container에 적용
	
21 Member
	회원관리 웹앱
	
22 File (hard)
	Upload : local -> server
		Form
			<form action="" method="post" enctype="multipart/form-data">
			<input type="file" name="myfile">
			<input type="submit" value="File Upload">
			</form>	
		MultipartRequest multi = new MultipartRequest(request, path, size, encode, new DefaultFileRenamePolicy());
	Download : server -> local
	Management : server에서 생성, 수정, 이동, 삭제

23 EL, Expression Language (hard)
	General
		JSP expression/action tag를 간략하게 하는 방법
		JSP expression : <%= value %> -> EL : ${value}
	action-tag
	built-in
		강의8 참고
		pageScope requestScope sessionScope applicationScope
		param paramValues initParam cookie
		
24 JSTL (hard)
	JSP Standard Tag Library
	설명
		HTML 코드에 JSP 코드가 추가 되면 전체 코드의 가독성이 떨어짐.
		JSP를 HTML 문법과 동일한 markup tag 방식으로 제공하여 가독성이 떨어지는 문제 해결.  
		5가지 Library 제공. Core, XML Processing, I18N formatting, SQL, Functions
		Library 설치가 별도로 필요
		객체 처리 (난이도 상)
	Core
		출력 제어문 반복문 같은 기능이 포함된 basic library
		JSTL 사용 선언
			<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
		변수 설정/출력/삭제
			<c:set var="변수명" value="값" target="객체" property="속성" scope="범위">
			<c:out value="값">
			<c:remove var="변수명" scope="범위">
		예외 처리
			<c:catch var="변수명">코드</c:catch>
		제어 if
			<c:if test="조건">true코드</c:if>
		제어 if-else, switch
			<c:choose>
				<c:when test="조건1">코드1</c:when><c:when test="조건2">코드2</c:when>
				<c:otherwise>코드3</c:otherwise>
			</c:choose>
		반복 for
			<c:forEach items= "객체명" var="변수명" begin="시작" end="끝" step="증감">반복코드</c:forEach>
		페이지 이동
			<c:redirect url="주소">
		패러미터 전달
			<c:param name="패러미터명" value="값">

25 Controller
	URL-pattern
		Directory pattern : servlet mapping, 디렉토리 형태로 서버의 해당 컴포넌트를 찾아 실행
			1 url -> 1 servlet
			.../Hello	-> /Hello
			.../World	-> /World
		Extension pattern : 확장자 형태로 컴포넌트를 찾고 sevlet내에서 알아서 실행
			many url ->1 servlet
			.../hello.do	-> *.do
			.../world.do	-> *.do
	FrontController-pattern
		클라이언트의 다양한 요청들을 한곳으로 집중하고 처리, 개발/유지보수에 유리
	Command-pattern
		요청들을 한곳으로 집중하되 직접 처리하지 않고 처리할 클래스에게 위임

26 Forwarding
	General
		Servlet/JSP에서 받은 요청을 직접 처리하지 않고 다른곳/component에 넘기거나 위임
	RequestDispatcher
		요청 받은 요청객체(request)를 위임 component에게 그대로/동일하게 전달
		ex
			RequestDispatcher dispatcher = request.getRequestDispatcher("컴포넌트");
			dispatcher.forward(request, response);
	HttpServletResponse
		요청을 다른곳에 위임하되 요청객체는 유지되지 않고 새로 생성됨
		
27 App - MVC board
	DBCP 로 업그레이드
	member app 연동
	Optimize (look, checking)
	Make
		new - ok
			bDate : now()
			gGroup : last_insert_id() doesn't work in statement query, temp solution(set to 0 at insert, then set to primary key value at update)
		list - ok
		get - ok
		modify - ok
		delete - ok
		reply - ok